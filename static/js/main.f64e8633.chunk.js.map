{"version":3,"sources":["utils/utils.js","contexts/FormContext.js","contexts/ResultContext.js","components/Input/Input.js","components/Calculator/Calculator.js","components/Result/Result.js","components/Container/Container.js","components/App/App.js","index.js"],"names":["getCurrentValues","values","valuesToCalculate","Object","keys","forEach","item","FormContext","React","createContext","ResultContext","Input","id","label","props","useField","field","meta","htmlFor","className","touched","error","defaultProps","Calculator","useContext","initialValues","feePercents","saveForm","clearForm","submitForm","useState","percentage","setPercentage","setFieldValue","validateOnChange","enableReinitialize","validationSchema","Yup","price","required","period","fee","rate","onSubmit","handleChange","name","onKeyUp","evt","Math","round","target","value","toString","map","type","onClick","percent","newFee","newPrice","handleRecount","Result","loan","payment","salary","overpayment","Number","isNaN","toLocaleString","maximumFractionDigits","Container","App","setInitialValues","setLoan","setPayment","setSalary","setOverpayment","result","calculate","useEffect","localValues","JSON","parse","localStorage","getItem","Provider","setItem","stringify","removeItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f64e8633.chunk.js","sourcesContent":["export const calculate = (values) => {\r\n  const { price, fee, period, rate } = values;\r\n  const loan = price >= fee ? price - fee : 0;\r\n  const payment = loan * (rate / 1200 + (rate / 1200) / ((1 + rate / 1200) ** period - 1));\r\n  const salary = 5 * (payment / 3);\r\n  const overpayment = price >= fee ? payment * period - price + fee : 0;\r\n  return { loan, payment, salary, overpayment };\r\n};\r\n\r\nexport const getCurrentValues = (values) => {\r\n  const valuesToCalculate = { ...values };\r\n  Object.keys(valuesToCalculate).forEach((item) => {\r\n    valuesToCalculate[item] = +valuesToCalculate[item];\r\n  });\r\n  return valuesToCalculate;\r\n};","import React from 'react';\r\n\r\nconst FormContext = React.createContext();\r\n\r\nexport default FormContext;","import React from 'react';\r\n\r\nconst ResultContext = React.createContext();\r\n\r\nexport default ResultContext;","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Input = ({ id, label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (<>\r\n    <label htmlFor={id} className='form__label'>{label}</label>\r\n    <input className='form__filed' {...field} {...props} />\r\n    {meta.touched && meta.error ? (\r\n      <div className='form__error'>{meta.error}</div>\r\n    ) : null}\r\n  </>);\r\n};\r\n\r\nInput.propTypes = {\r\n  label: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n\r\nInput.defaultProps = {\r\n  label: '',\r\n  id: '',\r\n};\r\n\r\nexport default Input;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { getCurrentValues } from '../../utils/utils';\r\nimport Input from '../Input/Input';\r\nimport FormContext from '../../contexts/FormContext';\r\n\r\nconst Calculator = () => {\r\n  const { initialValues,\r\n    feePercents,\r\n    saveForm,\r\n    clearForm,\r\n    submitForm } = useContext(FormContext);\r\n\r\n  const [percentage, setPercentage] = useState(0);\r\n\r\n  const handlePercentageChange = (percent) => {\r\n    if (percentage !== percent) {\r\n      setPercentage(percent);\r\n      return\r\n    }\r\n    setPercentage(0);\r\n  };\r\n\r\n  const handleRecount = (evt, values, setFieldValue) => {\r\n    const percent = +evt.target.id;\r\n    const { price, fee } = values;\r\n    if (price) {\r\n      const newFee = Math.round(+price * percent / 100).toString();\r\n      setFieldValue('fee', newFee);\r\n      submitForm(getCurrentValues({ ...values, fee: newFee }));\r\n    }\r\n    else if (!price && fee) {\r\n      const newPrice = Math.round(+fee / percent * 100).toString();\r\n      setFieldValue('price', newPrice);\r\n      submitForm(getCurrentValues({ ...values, newPrice }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        setFieldValue\r\n        validateOnChange\r\n        initialValues={initialValues}\r\n        enableReinitialize\r\n        validationSchema={Yup.object({\r\n          price: Yup.string().required('Это поле не должно быть пустым'),\r\n          period: Yup.string().required('Это поле не должно быть пустым'),\r\n          fee: Yup.string().required('Это поле не должно быть пустым'),\r\n          rate: Yup.string().required('Это поле не должно быть пустым')\r\n        })}\r\n        onSubmit={submitForm}>\r\n        {({ handleChange, setFieldValue, values }) => (\r\n          <Form className='form'>\r\n            <Input name='price' id='price' label='Стоимость недвижимости'\r\n              onKeyUp={(evt) => {\r\n                handleChange(evt);\r\n                if (percentage !== 0) {\r\n                  setFieldValue('fee', Math.round(+evt.target.value * percentage / 100).toString());\r\n                }\r\n                submitForm(getCurrentValues(values));\r\n              }} />\r\n            <Input name='fee' id='fee' label='Первоначальный взнос'\r\n              onKeyUp={(evt) => {\r\n                handleChange(evt);\r\n                if (percentage !== 0) {\r\n                  setFieldValue('price', Math.round(+evt.target.value / percentage * 100).toString());\r\n                }\r\n                submitForm(getCurrentValues(values));\r\n              }} />\r\n            <div className='form__percent'>\r\n              {feePercents.map((item) =>\r\n              (<button\r\n                key={item}\r\n                id={item}\r\n                type='button'\r\n                className={`${percentage === item && 'form__percent-rate_active'} form__percent-rate`}\r\n                onClick={(evt) => {\r\n                  handlePercentageChange(item);\r\n                  handleRecount(evt, values, setFieldValue, submitForm);\r\n                }}>\r\n                {`${item} \\u0025`}\r\n              </button>))}\r\n            </div>\r\n            <Input\r\n              name='period' id='period' label='Срок кредита'\r\n              onKeyUp={evt => {\r\n                handleChange(evt);\r\n                submitForm(getCurrentValues(values));\r\n              }} />\r\n            <Input name='rate' id='rate' label='Процентная ставка'\r\n              onKeyUp={evt => {\r\n                handleChange(evt);\r\n                submitForm(getCurrentValues(values));\r\n              }} />\r\n            <button\r\n              type='button' className='form__button form__button_type_save'\r\n              onClick={() => {\r\n                saveForm(values);\r\n              }}>\r\n              Save\r\n            </button>\r\n            <button type='reset' className='form__button form__button_type_clear'\r\n              onClick={clearForm}>\r\n              Clear\r\n           </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Calculator;\r\n","import React, { useContext } from 'react';\r\nimport ResultContext from '../../contexts/ResultContext';\r\n\r\nconst Result = () => {\r\n  const { loan, payment, salary, overpayment } = useContext(ResultContext);\r\n\r\n  return (\r\n    <div className='result'>\r\n      <div>\r\n        <h2 className='result__heading'>Ежемесячный платёж</h2>\r\n        <p className='result__values'>\r\n          {Number.isNaN(payment) || payment === 0\r\n            ? ''\r\n            : `${payment.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} \\u20bd`}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <h2 className='result__heading'>Необходимый доход</h2>\r\n        <p className='result__values'>\r\n          {Number.isNaN(salary) || salary === 0\r\n            ? ''\r\n            : `${salary.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} \\u20bd`}</p>\r\n      </div>\r\n      <div>\r\n        <h2 className='result__heading'>Переплата</h2>\r\n        <p className='result__values'>\r\n          {Number.isNaN(overpayment) || overpayment === 0\r\n            ? ''\r\n            : `${overpayment.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} \\u20bd`}</p>\r\n      </div>\r\n      <div>\r\n        <h2 className='result__heading'>Тело кредита</h2>\r\n        <p className='result__values'>\r\n          {Number.isNaN(loan) || loan === 0\r\n            ? ''\r\n            : `${loan.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} \\u20bd`}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport Calculator from '../Calculator/Calculator';\r\nimport Result from '../Result/Result';\r\n\r\nconst Container = () => (\r\n  <div className='container'>\r\n    <Calculator />\r\n    <Result />\r\n  </div>\r\n);\r\n\r\nexport default Container;\r\n","import React, { useEffect, useState } from 'react';\nimport { calculate, getCurrentValues } from '../../utils/utils';\nimport FormContext from '../../contexts/FormContext';\nimport ResultContext from '../../contexts/ResultContext';\nimport Container from '../Container/Container';\n\nfunction App() {\n  const [initialValues, setInitialValues] = useState({ price: '', fee: '', period: '', rate: '' });\n  const [loan, setLoan] = useState(0);\n  const [payment, setPayment] = useState(0);\n  const [salary, setSalary] = useState(0);\n  const [overpayment, setOverpayment] = useState(0);\n\n  const feePercents = [10, 15, 20, 25, 30];\n\n  const submitForm = (values) => {\n    const result = calculate(getCurrentValues(values));\n    setLoan(result.loan);\n    setPayment(result.payment);\n    setSalary(result.salary);\n    setOverpayment(result.overpayment);\n  };\n\n  useEffect(() => {\n    const localValues = JSON.parse(localStorage.getItem('initialValues'));\n    if (localValues) {\n      const { price, fee, period, rate } = localValues;\n      setInitialValues({\n        price: price.toString(),\n        fee: fee.toString(),\n        period: period.toString(),\n        rate: rate.toString()\n      });\n      submitForm(localValues);\n    }\n  }, []);\n\n  const clearForm = () => {\n    setInitialValues({ price: '', fee: '', period: '', rate: '' });\n    setLoan(0);\n    setPayment(0);\n    setSalary(0);\n    setOverpayment(0);\n    localStorage.removeItem('initialValues');\n  };\n\n  const saveForm = (values) => {\n    localStorage.setItem('initialValues', JSON.stringify(getCurrentValues(values)));\n  };\n\n  return (\n    <FormContext.Provider value={{\n      initialValues,\n      feePercents,\n      loan,\n      payment,\n      salary,\n      overpayment,\n      saveForm,\n      clearForm,\n      submitForm\n    }}>\n      <ResultContext.Provider value={{ loan, payment, salary, overpayment }}>\n        <div className='app'>\n          <Container />\n        </div>\n      </ResultContext.Provider>\n    </FormContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}